#+TITLE: Emacs configuration file
#+AUTHOR: Ouail Derghal
#+STARTUP: overview

* MELPA
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  (when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))
#+end_src

* Defaults
** Configuration file
#+begin_src emacs-lisp
  (setq emacs-config-file "~/.emacs.d/config.org")
  (global-set-key (kbd "<f12>") (lambda() (interactive) (find-file emacs-config-file)))
  (global-set-key (kbd "<f5>") (lambda() (interactive) (org-babel-load-file emacs-config-file)))
#+end_src

** Quiet startup
#+begin_src emacs-lisp
  (defun defaults/quiet-startup ()
  "Inhibit the startup message and clear scratch buffer."
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil))
#+end_src

** Clean startup
#+begin_src emacs-lisp
    (defun defaults/clean-startup ()
    "Remove toolbar, menubar and scrollbar and cursor blink"
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (blink-cursor-mode -1))
#+end_src

** Confirm closing Emacs
#+begin_src emacs-lisp
  (defun defaults/confirm-closing-emacs ()
    "Ask if syre that you want to close Eamcs."
    (setq confirm-kill-emacs 'y-or-n-p))
#+end_src

** Short yes-or-no
#+begin_src emacs-lisp
  (defun defaults/shorten-yes-or-no ()
  "`y/n?' instead of `yes/no?'."
  (fset 'yes-or-no-p 'y-or-n-p))
#+end_src

** No backup files
#+begin_src emacs-lisp
    (defun defaults/no-backup-files ()
    "Disable backup and autosave files"
    (setq make-backup-files nil)
    (setq auto-save-default nil))
#+end_src

** Apply default settings
#+begin_src emacs-lisp
  (defaults/quiet-startup)
  (defaults/clean-startup)
  (defaults/confirm-closing-emacs)
  (defaults/shorten-yes-or-no)
  (defaults/no-backup-files)
#+end_src

* Dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :ensure t
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+end_src

* Interface customization
** Clean interface
#+begin_src emacs-lisp
  (defaults/quiet-startup)
  (defaults/clean-startup)
#+end_src

** Relative line numbers
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

** Highlight current line
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'text-mode-hook #'hl-line-mode)
#+end_src

** Font confguration
#+begin_src emacs-lisp
  (setq od/default-fixed-font "Ubuntu Mono")
  (setq od/default-fixed-font-size 115)
  (setq od/font-change-increment 1.1)
  (setq od/current-fixed-font-size od/default-fixed-font-size)
  
  (set-face-attribute 'default nil
		      :family od/default-fixed-font
		      :height od/default-fixed-font-size)

  (set-face-attribute 'fixed-pitch nil
		      :family od/default-fixed-font
		      :height od/default-fixed-font-size)
#+end_src

** Theme configuration
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t)
    (setq doom-themes-enable-italic t)
    (load-theme 'doom-zenburn t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src

** DOOM modeline
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1))

  (display-battery-mode 1)
  
  (setq display-time-default-load-average nil)
  (display-time-mode 1)
#+end_src

* Mini buffer completion
** Smex
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
    :config
    (smex-initialize))
#+end_src

** Helm
#+begin_src emacs-lisp
  (use-package helm
  :disabled t
  :ensure t
  :init
  (global-set-key (kbd "M-x") 'helm-M-x)
  ; (global-set-key (kbd "C-x C-f") 'helm-find-files)
  :config
  (helm-mode 1)
  (define-key helm-map (kbd "C-j") 'helm-next-line)
  (define-key helm-map (kbd "C-k") 'helm-previous-line)
  (define-key helm-map (kbd "C-d") 'helm-next-page)
  (define-key helm-map (kbd "C-u") 'helm-previous-page))
#+end_src

** Interactively do things
#+begin_src emacs-lisp
  (use-package ido
    :ensure t
    :init
    (setq ido-use-filename-at-point 'guess)
    (setq ido-create-new-buffer 'always)
    (setq ido-file-extensions-order '(".org" ".txt" ".py" "yml" ".el" ".ini" ".cfg" ".cnf"))
    :config
    (ido-mode t)
    (ido-everywhere t))
#+end_src

** Ivy, Counsel and Swiper
#+begin_src emacs-lisp
  (use-package ivy
    :disabled t
    :ensure t
    :init
    (ivy-mode)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; ivy keybindings
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+end_src

* Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-intergration t)
    :config
    (evil-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src

#+begin_src emacs-lisp
  (define-key evil-insert-state-map (kbd "jk") 'evil-normal-state)
#+end_src

* Org mode
** General configuration
#+begin_src emacs-lisp
  (setq org-ellipsis " ↴")
  (setq org-log-done t)
  (add-hook 'org-mode-hook #'visual-line-mode)
  (setq org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
#+end_src

** Org cycle with Evil mode
#+begin_src emacs-lisp
  (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
#+end_src

** Org bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** OX twbs
#+begin_src emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+end_src

* Engine mode
#+begin_src emacs-lisp
  (use-package engine-mode
    :ensure t
    :config
    (engine-mode t)
    (engine/set-keymap-prefix (kbd "C-c s")))
#+end_src

** Enignes definition
#+begin_src emacs-lisp
  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "g")

  (defengine youtube
    "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
    :keybinding "y")

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine scholar
    "https://scholar.google.com/scholar?hl=en&q=%s"
    :keybinding "s")

  (defengine google-images
    "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s")
#+end_src

* Indent guides mode
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'highlight-indent-guides-mode)
    (add-hook 'yaml-mode-hook #'highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'character))
#+end_src

* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))

  (use-package counsel-projectile
    :disabled t
    :ensure t
    :config
    (counsel-projectile-mode +1))
#+end_src

* Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-c g") 'magit-status))
#+end_src

* Web mode
#+begin_src emacs-lisp
  (use-package web-mode :ensure t)
#+end_src

* LSP mode
#+begin_src emacs-lisp
  (use-package lsp-mode :ensure t)
#+end_src

* Corfu
#+begin_src emacs-lisp
  (use-package corfu
    :disabled t
    :ensure t
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.0)
    (corfu-echo-documentation 0.25)
    (corfu-preview-current 'insert)
    (corfu-preselect-first nil)
    (corfu-on-exact-match nil)

    :bind (:map corfu-map
		("M-SPC"      . corfu-insert-separator)
		("TAB"        . corfu-next)
		("S-TAB"      . corfu-previous)
		("S-<return>" . corfu-insert)
		("RET"        . nil))

    :init
    (global-corfu-mode)
    (corfu-history-mode)
    :config
    (setq tab-always-indent 'complete)
    (add-hook 'eshell-mode-hook
	      (lambda () (setq-local corfu-quit-at-boundary t
				corfu-quit-no-match t
				corfu-auto nil)
		(corfu-mode))))
#+end_src



