#+title: Emacs Configuration
#+author: Ouail Derghal
#+startup: fold

* Open Emacs config file
#+begin_src elisp
  (defun od/open-config-org ()
    "Open config.org in a new buffer."
    (interactive)
    (find-file "~/.config/emacs/config.org"))
#+end_src

#+begin_src elisp
  (defun od/open-config-init ()
    "Open init.el in a new buffer."
    (interactive)
    (find-file "~/.config/emacs/init.el"))
#+end_src

* Appearance
** Clean Interface
#+begin_src elisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (column-number-mode 1)
  (line-number-mode 1)
  (setq inhibit-startup-screen t)
  (setq inhibit-splash-screen t)
  (setq split-width-threshold nil)
  (setq split-height-threshold nil)
  (setq blink-cursor-mode nil)
#+end_src

#+begin_src elisp
  (display-time-mode 1)
  (setq display-time-format "%H:%M")
  (setq display-time-default-load-average nil)
  (setq display-time-load-average nil)
#+end_src

** Fonts
#+begin_src elisp
  (set-face-attribute 'default nil :family "Hack Nerd Font" :height 120 :weight 'normal)
  (set-face-attribute 'fixed-pitch nil :family "Hack Nerd Font" :height 120 :weight 'normal)
  (set-face-attribute 'variable-pitch nil :family "Hack Nerd Font" :height 130 :weight 'normal)
#+end_src

** Theme
#+begin_src elisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)

    (load-theme 'doom-badger t)

    (doom-themes-visual-bell-config)
    (doom-themes-neotree-config)
    (setq doom-themes-treemacs-theme "doom-badger")
    (doom-themes-treemacs-config)
    
    (doom-themes-org-config))
#+end_src

** Doom modeline
#+begin_src elisp
  (use-package doom-modeline
    :ensure t
    :init
    (setq doom-modeline-height 25) ;; Adjust the height of the modeline
    :custom-face (doom-modeline-buffer-modified ((t (:foreground "orange"))))
    :hook (after-init . doom-modeline-mode))  
    #+end_src
** Line Numbers
#+begin_src elisp
  (add-hook 'text-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'org-mode-hook #'display-line-numbers-mode)
  (add-hook 'conf-mode-hook #'display-line-numbers-mode)
#+end_src

** temp and backup files
#+begin_src elisp
  (setq auto-save-default nil)
  (setq backup-inhibited t)
#+end_src

* Productivity
** windmove
#+begin_src elisp
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+end_src

** ido
#+begin_src elisp
  (ido-mode 1)
  (setq ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (setq ido-create-new-buffer 'always)
  (setq ido-file-extensions-order '(".org" ".txt" ".py" ".emacs" ".xml" ".el" ".ini" ".cfg" ".conf" ".yaml" ".yml" ".json" ".jsx" ".js" ".ts" ".tsx" ".html" ".css" ".scss" ".md" ".markdown" ".rst" ".csv" ".sql" ".php" ".java" ".c" ".cpp" ".h" ".hpp" ".m" ".sh" ".rb" ".pl" ".pm" ".tcl" ".go" ".lua" ".coffee" ".bat" ".ps1" ".psm1" ".psd1" ".erb"))

  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
  (global-set-key (kbd "C-x C-f") 'ido-find-file)
  (global-set-key (kbd "C-x k") 'ido-kill-buffer)
  (global-set-key (kbd "C-x B") 'ido-switch-buffer-other-window)
#+end_src

** smex
#+begin_src elisp
  (use-package smex
  :ensure t
  :bind (("M-x" . smex)
         ("M-X" . smex-major-mode-commands)
         ;; This is your old M-x.
         ("C-c C-c M-x" . execute-extended-command)))
#+end_src

* Org
** config
#+begin_src elisp
  (use-package org
    :config
    (setq org-directory "~/Dropbox/org/"
          org-agenda-files '("~/Dropbox/org/personal.org" "~/Dropbox/org/work.org" "~/Dropbox/org/phd.org")
          org-ellipsis "â¤µ"
          org-hide-emphasis-markers t)
    :hook  (org-mode . org-indent-mode))
#+end_src

** Org bullets
#+begin_src elisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Org level header
#+begin_src elisp
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.3))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
   '(org-level-6 ((t (:inherit outline-5 :height 1.1))))
   '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

** Org TOC
#+begin_src elisp
  (use-package toc-org
  :ensure t
  :hook (org-mode . toc-org-enable))
#+end_src

** Org Capture
#+begin_src elisp
  (use-package org
    :config
    ;; Define capture templates for personal.org
    (setq org-capture-templates
          '(("p" "Personal Todo" entry
             (file+headline "~/Dropbox/org/personal.org" "Tasks")
             "* TODO %?\n %i\n")
            ("n" "Personal Note" entry
             (file+headline "~/Dropbox/org/personal.org" "Notes")
             "* %?\n %i\n")))

    ;; Define capture templates for phd.org
    (add-to-list 'org-capture-templates
                 '("i" "IMT Todo" entry
                   (file+headline "~/Dropbox/org/phd.org" "Tasks")
                   "* TODO %?\n %i\n"))

    ;; Define capture templates for work.org
    (add-to-list 'org-capture-templates
                 '("w" "Work Todo" entry
                   (file+headline "~/Dropbox/org/work.org" "Tasks")
                   "* TODO %?\n %i\n")))
#+end_src

** PDF Tools

* Programmming
** Treesitter
#+begin_src elisp
    (setq treesit-language-source-alist
       '((bash "https://github.com/tree-sitter/tree-sitter-bash")
         (cmake "https://github.com/uyha/tree-sitter-cmake")
         (css "https://github.com/tree-sitter/tree-sitter-css")
         (elisp "https://github.com/Wilfred/tree-sitter-elisp")
         (go "https://github.com/tree-sitter/tree-sitter-go")
         (html "https://github.com/tree-sitter/tree-sitter-html")
         (json "https://github.com/tree-sitter/tree-sitter-json")
         (make "https://github.com/alemuller/tree-sitter-make")
         (markdown "https://github.com/ikatyang/tree-sitter-markdown")
         (python "https://github.com/tree-sitter/tree-sitter-python")
         (toml "https://github.com/tree-sitter/tree-sitter-toml")
         (yaml "https://github.com/ikatyang/tree-sitter-yaml")
         (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")))
#+end_src

#+begin_src elisp
  (use-package tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :after tree-sitter
    :ensure t)
#+end_src

** Magit
#+begin_src elisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status)
    :config
    (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Projectile
Projectile is a package that provides project navigation and management functionalities, including features such as file searching, project-wide commands, and integration with version control systems.

#+begin_src elisp
  (use-package projectile
    :ensure t
    :init
    (setq projectile-completion-system 'ido)
    :bind
    ("C-c p" . projectile-commander)
    :config
    (projectile-mode +1)
    
    (def-projectile-commander-method ?$
      "Open a *shell* buffer for the project."
      (projectile-run-shell)))  
#+end_src

** Docker
#+begin_src elisp
  (use-package docker
  :ensure t
  :bind ("C-c d" . docker))

  (use-package dockerfile-mode
  :ensure t
  :mode ("Dockerfile\\'" . dockerfile-mode))
#+end_src

** Go
#+begin_src elisp
  (use-package go-mode
    :ensure t
    :config
    (add-hook 'go-mode-hook
              (lambda ()
                (setq tab-width 4))))
#+end_src

** Markdown
#+begin_src elisp
  (use-package markdown-mode
    :ensure t
    :mode ("\\.md\\'" . markdown-mode)
    :hook (markdown-mode . visual-line-mode)
    :bind (("C-c C-r" . markdown-preview)))
#+end_src

* Tools
** sudo-edit
#+begin_src elisp
    (use-package sudo-edit
      :ensure t
      :commands (sudo-edit)
      :bind (("C-x #" . sudo-edit)))
#+end_src

** Open PDF in envince
#+begin_src elisp
  (defun od/dired-open-pdf ()
    "Open the selected PDF file in evince."
    (interactive)
    (let ((file (dired-get-file-for-visit)))
      (if (string-match "\\.pdf\\'" file)
          (start-process "evince" nil "evince" file)
        (message "Not a PDF file."))))

  (define-key dired-mode-map (kbd "C-c o") 'od/dired-open-pdf)
#+end_src

** Open Alacritty in working directory
#+begin_src elisp
  (defun od/open-alacritty-here ()
    "Open an Alacritty terminal in the current working directory."
    (interactive)
    (let ((default-directory (file-name-directory buffer-file-name)))
      (start-process "alacritty" nil "alacritty")))

  (global-set-key (kbd "C-x a") 'od/open-alacritty-here)
#+end_src
