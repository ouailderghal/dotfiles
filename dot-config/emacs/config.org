#+TITLE: Emacs Configuration
#+AUTHOR: Ouail Derghal
#+STARTUP: fold

* Package management
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
               ("org" . "https://orgmode.org/elpa/")
               ("gnu" . "https://elpa.gnu.org/packages/")))
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

* Defaults
** Config
#+begin_src emacs-lisp
  (defvar od/config-org-path (expand-file-name "config.org" user-emacs-directory)
    "Path to the config.org file.")

  ;; Define a function to open the config.org file
  (defun od/open-config-org ()
    "Open the config.org file in a new buffer."
    (interactive)
    (find-file od/config-org-path))

  ;; Bind the function to a key combination
  (global-set-key (kbd "C-c C-o") 'od/open-config-org)  ;; Bind C-c C-o to open the config.org file

  ;; Use 'y' and 'n' instead of 'yes' and 'no'
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Disable backup files
  (setq make-backup-files nil)

  ;; Disable auto-save files
  (setq auto-save-default nil)
  (setq auto-save-list-file-prefix nil)

  ;; Disable lockfiles
  (setq create-lockfiles nil)
#+end_src

** Interface
*** Clean interface
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1) ;; Hide menu bar
  (tool-bar-mode -1) ;; Hide tool bar
  (scroll-bar-mode -1) ;; Hide scollbar
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message t)  ;; Suppress the echo area message
  (setq initial-scratch-message nil) ;; Clear the initial scratch buffer message
  (setf (default-value 'fringe-mode) '(0 . 0)) ;; Hide fringes
#+END_SRC

*** Font family
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :family "UbuntuMono Nerd Font Mono"
		      :height 120
		      :weight 'normal
		      :width 'normal)
#+end_src

*** Theme
#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs nil
          modus-themes-region '(bg-only no-extend)
          modus-themes-syntax '(faint)
          modus-themes-paren-match '(bold intense)
          modus-themes-completions '((matches . (extrabold background))
                                     (selection . (semibold accented))
                                     (popup . (accented intense)))
          modus-themes-org-blocks 'gray-background
          modus-themes-headings '((1 . (rainbow overline background 1.4))
                                  (2 . (rainbow background 1.3))
                                  (3 . (rainbow bold 1.2))
                                  (t . (semilight 1.0))))
    :config
    (load-theme 'modus-vivendi t))
#+end_src

** Ivy, Vertico, Orderless and Marginalia
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :diminish
    :bind (("C-s" . isearch-forward) ;; Bind Swiper to C-s
	:map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line))
    :config
    (ivy-mode 1))
#+end_src

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles partial-completion)))))
#+end_src

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))
#+end_src

** Dired
Some basic enhancements for the Dired file manager:
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands dired dired-jump
    :bind (("C-x C-j" . dired-jump))
    :config
    (setq dired-listing-switches "-alh")   ;; Human-readable sizes, show all files
    (setq dired-dwim-target t)             ;; Guess target directory for moving/copying files
    (setq delete-by-moving-to-trash t)     ;; Use system trash instead of deleting files directly
    (setq dired-recursive-deletes 'always) ;; Allow recursive deletion of directories
    (setq dired-recursive-copies 'always)  ;; Allow recursive copying of directories
    (put 'dired-find-alternate-file 'disabled nil)) ;; Enable using 'a' to open files in same buffer
#+end_src

** wind-move and wind-resize
#+begin_src emacs-lisp
  (use-package windmove
    :ensure nil
    :config
    (global-set-key (kbd "M-<left>") 'windmove-left)
    (global-set-key (kbd "M-<right>") 'windmove-right)
    (global-set-key (kbd "M-<up>") 'windmove-up)
    (global-set-key (kbd "M-<down>") 'windmove-down))
#+end_src

#+begin_src emacs-lisp
  (use-package windresize
    :ensure t
    :bind (("C-S-<left>" . od/windresize-left)
           ("C-S-<right>" . od/windresize-right)
           ("C-S-<up>" . od/windresize-up)
           ("C-S-<down>" . od/windresize-down))
    :config
    (defconst od/windresize-amount 5
    "Amount by which to resize windows.")

    (defun od/windresize-left ()
      "Resize the current window to the left by `od/windresize-amount` columns."
      (interactive)
      (windresize-left od/windresize-amount))

    (defun od/windresize-right ()
      "Resize the current window to the right by `od/windresize-amount` columns."
      (interactive)
      (windresize-right od/windresize-amount))

    (defun od/windresize-up ()
      "Resize the current window upwards by `od/windresize-amount` rows."
      (interactive)
      (windresize-up od/windresize-amount))

    (defun od/windresize-down ()
      "Resize the current window downwards by `od/windresize-amount` rows."
      (interactive)
      (windresize-down od/windresize-amount)))

#+end_src
** move-text
#+begin_src emacs-lisp
  (use-package move-text
    :ensure t
    :bind (("M-S-<up>" . move-text-up)
           ("M-S-<down>" . move-text-down)))
#+end_src

* Documents
** markdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)  ;; Use GFM mode for README.md files
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init
    (setq markdown-command "pandoc") ;; Set pandoc as the backend for markdown preview
    :config
    ;; Additional configurations can go here
    (setq markdown-enable-math t)    ;; Enable LaTeX math
    (setq markdown-hide-urls nil)    ;; Don't hide URLs
    (setq markdown-fontify-code-blocks-natively t)) ;; Fontify code blocks
#+end_src

** org-mode
#+begin_src emacs-lisp
  ;; Install and configure org mode
  (use-package org
    :ensure t
    :bind (("C-c a" . org-agenda)  ;; Bind C-c a to open the Org agenda
           ("C-c c" . org-capture) ;; Bind C-c c to capture new entries
           ("C-c l" . org-store-link)) ;; Bind C-c l to store links
    :config
    ;; Customize heading faces
    ;; (custom-set-faces
    ;;  '(org-level-1 ((t (:inherit outline-1 :weight bold :height 1.4))))
    ;;  '(org-level-2 ((t (:inherit outline-2 :weight bold :height 1.3))))
    ;;  '(org-level-3 ((t (:inherit outline-3 :weight bold :height 1.2))))
    ;;  '(org-level-4 ((t (:inherit outline-4 :weight bold :height 1.1))))
    ;;  '(org-level-5 ((t (:inherit outline-5 :weight bold :height 1.05))))
    ;;  '(org-level-6 ((t (:inherit outline-6 :weight bold :height 1.0))))
    ;;  '(org-level-7 ((t (:inherit outline-7 :weight bold :height 1.0))))
    ;;  '(org-level-8 ((t (:inherit outline-8 :weight bold :height 1.0))))

    ;; Org mode settings
    (setq org-log-done 'time) ;; Log time when a task is marked done
    (setq org-hide-leading-stars t) ;; Hide leading stars on headings
    (setq org-startup-indented t) ;; Indent headings
    (setq org-pretty-entities t) ;; Use pretty symbols for entities
    (setq org-ellipsis "â¤µ" ) ;; Use ellipsis for hidden content
    (setq org-hide-emphasis-markers t) ;; Hide emphasis markers (e.g., asterisks)

    ;; Enable syntax highlighting in code blocks
    (setq org-src-fontify-natively t)

    ;; Set default agenda files
    (setq org-agenda-files '("~/org/agenda.org"))

    ;; Set default capture templates
    (setq org-capture-templates
          '(("t" "Todo" entry (file+headline "~/org/todo.org" "Tasks")
             "* TODO %?\n  %i\n  %a")
            ("n" "Note" entry (file+headline "~/org/notes.org" "Notes")
             "* %? :NOTE:\n  %i\n  %a"))))

#+end_src

** AUCTex
#+begin_src emacs-lisp
  ;; Install and configure AUCTeX
  (use-package auctex
    :ensure t
    :defer t
    :init
    ;; Enable AUCTeX by default when opening LaTeX files
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)  ;; Prompt for master file
    :config
    ;; Use PDF mode by default
    (setq TeX-PDF-mode t))


  ;; Set up RefTeX for citations and references
  (use-package reftex
    :ensure t
    :hook (LaTeX-mode . reftex-mode)
    :config
    (setq reftex-plug-into-AUCTeX t))
#+end_src

* Programming
** Tools
*** Docker
#+begin_src emacs-lisp
  (use-package docker
    :ensure t
    :bind ("C-c d" . docker)  ;; Bind C-c d to launch the docker menu
    :config
    (setq docker-command "docker"))
#+end_src

*** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)  ;; Bind C-x g to open Magit status
	   ("C-x M-g" . magit-dispatch))  ;; Bind C-x M-g to open Magit dispatch
    :config
    ;; Optional configurations
    (setq magit-auto-revert-mode nil))  ;; Disable auto-revert mode for performance reasons
#+end_src

*** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode ;; Hide Projectile mode in the modeline
    :config
    (projectile-mode +1) ;; Enable Projectile globally
    ;; Set Projectile cache directory
    (setq projectile-cache-file (expand-file-name "projectile.cache" user-emacs-directory))
    ;; Set Projectile known projects file
    (setq projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-emacs-directory))
    ;; Set default search method
    (setq projectile-indexing-method 'alien) ;; Use external tools for indexing (faster for large projects)
    ;; Set Projectile completion system
    (setq projectile-completion-system 'auto) ;; Auto-select the best completion system (like Ivy, Helm, etc.)
    ;; Use a fuzzy search for file names
    (setq projectile-enable-caching t) ;; Enable caching for faster performance
    ;; Set the default projectile switch project action
    (setq projectile-switch-project-action 'projectile-dired) ;; Default action is to open project in Dired
    ;; Define a keymap prefix for Projectile commands
    :bind-keymap
    ("C-c p" . projectile-command-map) ;; Bind "C-c p" as the prefix for Projectile commands
    :init
    (setq projectile-project-search-path '("~/Projects")))

  (use-package projectile-ripgrep
    :ensure t
    :after projectile)
#+end_src

*** lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook (go-mode . lsp)  ;; Automatically start lsp-mode for Go files
    :commands lsp
    :config
    (setq lsp-go-gopls-server-path "gopls")  ;; Path to the Go language server
    (setq lsp-prefer-flymake nil))  ;; Prefer lsp-ui for diagnostics instead of flymake

  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :config
    (setq lsp-ui-doc-enable t)
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-imenu-enable t)
    (setq lsp-ui-flycheck-enable t)
    (setq lsp-ui-peek-enable t))
#+end_src

*** company-mode
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook (go-mode . company-mode)  ;; Enable company-mode for Go files
    :config
    (setq company-tooltip-align-annotations t)  ;; Align annotations to the right
    (setq company-idle-delay 0.2)  ;; Delay before suggestions appear
    (setq company-minimum-prefix-length 1))  ;; Minimum prefix length for suggestions
#+end_src

** Languages
*** dockerfile-mode
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :mode ("Dockerfile\\'" . dockerfile-mode))
#+end_src

*** go-mode
#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :mode ("\\.go\\'" . go-mode)
    :bind (("C-c C-r" . go-run)
	   ("C-c C-f" . gofmt))
    :hook ((before-save . gofmt-before-save))  ;; Format Go code before saving
    :config
    (setq gofmt-command "goimports")  ;; Use goimports instead of gofmt
    (add-to-list 'exec-path (expand-file-name "~/go/bin")))  ;; Set GOPATH
#+end_src

*** tuareg-mode
#+begin_src emacs-lisp
  (use-package tuareg
    :ensure t
    :mode ("\\.ml\\'" . tuareg-mode)
    :config
    ;; Optional: additional Tuareg configurations
    (setq tuareg-indent-level 2)) ;; Set indentation level for Tuareg mode
#+end_src

*** yaml-mode
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode ("\\.yaml\\'" . yaml-mode)
    :mode ("\\.yml\\'" . yaml-mode)
    :config
    (setq yaml-indent-offset 2) ;; Set YAML indent offset to 2 spaces
    (add-hook 'yaml-mode-hook
              (lambda ()
                (ansible 1)  ;; Enable ansible-mode when in yaml-mode
                (ansible-doc-mode 1))))  ;; Enable ansible-doc mode for YAML files
#+end_src

*** ansible-mode
#+begin_src emacs-lisp
  (use-package ansible
    :ensure t
    :hook ((yaml-mode . ansible)      ;; Automatically enable ansible-mode in YAML files
           (ansible . ansible-auto-decrypt-encrypt))  ;; Auto-encrypt/decrypt Vault files
    :config
    (setq ansible::vault-password-file "~/.ansible_vault_pass"))  ;; Set vault password file

  ;; Ansible-doc mode
  (use-package ansible-doc
    :ensure t
    :hook (yaml-mode . ansible-doc-mode)  ;; Enable ansible-doc mode in YAML files
    :config
    (add-hook 'yaml-mode-hook #'ansible-doc-mode))
#+end_src

*** php-mode
#+begin_src emacs-lisp
  (use-package php-mode
    :ensure t
    :mode ("\\.php\\'" . php-mode)
    :config
    ;; Optional: Set the basic indentation level
    (setq-default php-mode-coding-style 'psr2) ;; Set to PSR-2 coding style
    (setq-default php-lineup-cascaded-calls t) ;; Line up cascaded method calls
    (setq-default tab-width 4)                 ;; Set tab width to 4 spaces
    (setq-default indent-tabs-mode nil))       ;; Use spaces instead of tabs
#+end_src

*** shell-mode
#+begin_src emacs-lisp
  (use-package shell
    :hook (shell-mode . (lambda ()
                          ;; Bind C-l to clear the shell buffer
                          (local-set-key (kbd "C-l") 'od/clear-shell-buffer)
                          ;; Bind C-p to previous command in history
                          (local-set-key (kbd "C-p") 'comint-previous-input)
                          ;; Bind C-n to next command in history
                          (local-set-key (kbd "C-n") 'comint-next-input)))
    :config
    ;; Function to clear the shell buffer
    (defun od/clear-shell-buffer ()
      "Clear the shell buffer."
      (interactive)
      (let ((comint-buffer-maximum-size 0))
        (comint-truncate-buffer))))
#+end_src

*** typescript-mode
#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t
    :mode ("\\.ts\\'" . typescript-mode) ;; Automatically use typescript-mode for .ts files
    :config
    ;; Set basic offset for indentation
    (setq typescript-indent-level 4))
#+end_src

** Settings
#+begin_src emacs-lisp
  (setq-default tab-width 4)          ;; Set the default tab width to 4 spaces
  (setq-default indent-tabs-mode nil) ;; Use spaces instead of tabs for indentation
#+end_src

#+begin_src emacs-lisp
  (use-package display-line-numbers
    :ensure nil
    :hook ((prog-mode . display-line-numbers-mode)
	   (org-mode . display-line-numbers-mode)
	   (text-mode . display-line-numbers-mode))
    :config
    (setq display-line-numbers-type 'relative))  ;; Use relative line numbers
#+end_src

#+begin_src emacs-lisp
  (use-package ansi-color
    :ensure t
    :init
    (defun od/colorize-compilation-buffer ()
      "Apply ANSI color codes to the compilation buffer."
      (ansi-color-apply-on-region compilation-filter-start (point-max)))
    :hook (compilation-filter . od/colorize-compilation-buffer))
#+end_src
