#!/usr/bin/env python

from pathlib import Path
import argparse
import pathlib

HOME = Path.home()
CONFIG = HOME.joinpath('.config')

dotfiles = [
    ('alacritty', CONFIG.joinpath('alacritty')),
    ('awesome', CONFIG.joinpath('awesome')),
    ('bash', HOME),
    ('emacs', HOME.joinpath('.emacs.d')),
    ('i3', CONFIG.joinpath('i3')),
    ('i3status', CONFIG.joinpath('i3status')),
    ('neofetch', CONFIG.joinpath('neofetch')),
    ('nvim', CONFIG.joinpath('nvim')),
    ('tmux', CONFIG.joinpath('tmux')),
    ('xmodmap', HOME)
]


def get_args() -> argparse.Namespace:
    parser =  argparse.ArgumentParser(description='Deploy configuraiton files')

    parser.add_argument('-d, --deploy',
                        help='deploy configuration files',
                        required=True,
                        action='store_true',
                        dest='deploy')

    parser.add_argument('-r, --remove',
                        help='undeploy configuration file',
                        required=False,
                        action='store_true',
                        dest='undeploy')

    parser.add_argument('-a, --all',
                        help='deploy all configuration files',
                        required=False,
                        action='store_true',
                        dest='deploy_all')

    parser.add_argument('-c, --config',
                        help='configuration name',
                        type=str,
                        required=False,
                        dest='config_name')

    return parser.parse_args()


def which_stow() -> bool:
    """
    Check if GNU stow is available in your PATH
    :return: True if stow is installed, otherwise False
    """
    from shutil import which
    return which('stow') is not None


def stow(name: str, target: pathlib.Path) -> bool:
    """
    Create symlinks for a specific configuration using GNU stow
    :param name: config name
    :param target: path to deploy the config
    """
    import subprocess
    target.mkdir(parents=True, exist_ok=True)
    command = f'stow {name} -t {target}'
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE)
    return True if result.returncode == 0 else False


def deploy_config(name: str) -> bool:
    """
    Deploy specific configuration files to target
    :param name: configuration name
    """
    try:
        config = list(filter(lambda item: item[0] == name, dotfiles))[0]
        target = config[1]
        result = stow(name, target)

        if result:
            print(f'[OK] configuration {name} has been deployed successfully.')
            return True

        return False
    except IndexError:
        print(f'[ERR] configuration {name} is not found.')
        return False


def deploy_all() -> None:
    for config_name, _ in dotfiles:
        deploy_config(config_name)


def main() -> None:
    args = get_args()

    if args.deploy and args.config_name is not None and not args.deploy_all:
        deploy_config(args.config_name)

    if args.deploy and args.deploy_all and args.config_name is None:
        deploy_all()


if __name__ == '__main__':
    main()
