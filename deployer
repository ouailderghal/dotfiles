#!/usr/bin/env python

from pathlib import Path
import argparse
import pathlib
import sys


class Deployer:
    """
    Configuration files deployer class
    """

    def __init__(self):
        self.home = pathlib.Path.home()
        self.config = self.home.joinpath('.config')
        self.which_stow =  self._which_stow()

        self.dotfiles = [
            ('alacritty', self.config.joinpath('alacritty')),
            ('awesome', self.config.joinpath('awesome')),
            ('bash', self.home),
            ('emacs', self.home.joinpath('.emacs.d')),
            ('i3', self.config.joinpath('i3')),
            ('i3status', self.config.joinpath('i3status')),
            ('neofetch', self.config.joinpath('neofetch')),
            ('nvim', self.config.joinpath('nvim')),
            ('tmux', self.config.joinpath('tmux')),
            ('xmodmap', self.home),
            ('zsh', self.home),
        ]

    @staticmethod
    def _which_stow() -> bool:
        """
        Check if GNU stow is available in your PATH
        :return: True if stow is installed, otherwise False
        """

        from shutil import which
        return which('stow') is not None

    def _stow(self, name: str, target: pathlib.Path) -> bool:
        """
        Create symlinks for a specific configuration using GNU stow
        :param name: config name
        :param target: path to deploy the config
        """

        import subprocess
        target.mkdir(parents=True, exist_ok=True)
        command = f'stow --dotfiles {name} -t {target}'
        result = subprocess.run(command, shell=True, stdout=subprocess.PIPE)
        return True if result.returncode == 0 else False

    def remove_config(self, name: str) -> None:
        """
        Remove a specific configuration files
        :param name: configuration name
        """
        from shutil import rmtree

        try:
            config = list(filter(lambda item: item[0] == name, self.dotfiles))[0]
            target = config[1]

            rmtree(target)

            print(f'[OK] configuration {name} has been removed successfully.')
            sys.exit(0)
        except IndexError:
            print(f'[ERR] configuration {name} is not found.')
            sys.exit(1)
        except FileNotFoundError:
            print(f'[WARN] configuration {name} is not deployed.')
            sys.exit(1)


    def deploy_config(self, name: str) -> bool:
        """
        Deploy specific configuration files to target
        :param name: configuration name
        """

        if not self.which_stow:
            print('[ERR] stow is not installed.')
            return False

        try:
            config = list(filter(lambda item: item[0] == name, self.dotfiles))[0]
            target = config[1]
            result = self._stow(name, target)

            if result:
                print(f'[OK] configuration {name} has been deployed successfully.')
                return True

            return False
        except IndexError:
            print(f'[ERR] configuration {name} is not found.')
            return False

    def deploy_all(self) -> None:
        """
        Deploy all configuration files to their targets
        """

        if not self.which_stow:
            print('[ERR] stow is not installed.')
            return

        for config_name, _ in self.dotfiles:
            self.deploy_config(config_name)


def get_args() -> argparse.Namespace:
    parser =  argparse.ArgumentParser(description='Deploy configuraiton files')

    parser.add_argument('-a, --all',
                        help='perform action on all configuration files',
                        required=False,
                        action='store_true',
                        dest='all')

    parser.add_argument('-d, --deploy',
                        help='deploy configuration files',
                        required=False,
                        action='store_true',
                        dest='deploy')

    parser.add_argument('-r, --remove',
                        help='remove configuration file',
                        required=False,
                        action='store_true',
                        dest='remove')

    parser.add_argument('-c, --config',
                        help='configuration name',
                        type=str,
                        required=False,
                        dest='config_name')

    return parser.parse_args()


def main() -> None:
    deployer = Deployer()

    args = get_args()

    if args.deploy and args.config_name is not None and not args.all:
        deployer.deploy_config(args.config_name)

    if args.deploy and args.all and args.config_name is None:
        deployer.deploy_all()

    if args.remove and args.config_name is not None and not args.all:
        deployer.remove_config(args.config_name)


if __name__ == '__main__':
    main()
